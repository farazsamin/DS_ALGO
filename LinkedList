
//***********************************************************************************************************************************************************************

//Insert At the Beginning 

#include<iostream>
using namespace std;

// Linked List. Inserting node at the beginning

struct node{
    int data;
    node* next; // address
};
node* head; // pointer to head node


// Function to insert at the beginning 
void insert(int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = head;
    head = temp;
}

// Print the list 
void print(){
    node * temp = head;
    cout<<"ALL Numbers are : "<<endl;
    while(temp != NULL){
        cout<<temp-> data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int main(){

   head = NULL;
   cout<<"How many Numbers ?"<<endl;
   int n,x;
   cin>>n;
   cout<<"Enter the Numbers : "<<endl;
   for(int i=0;i<n;i++){
   cin>>x;
   insert(x);
   print();
   }

}


//**********************************************************************************************************************************************************************

// Insert At the Last 

#include<iostream>
using namespace std;

struct node {
    int data;
    node * next;
};
node * head;

//insert at the last of the list
void insert(int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = NULL;
    if(head==NULL) head = temp;
    else {
      node* temp2 = head;
      while(temp2->next != NULL){
        temp2 = temp2->next;
      }
      temp2->next = temp;
    }
}

void print(){
    node * temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int main(){
  head = NULL;
  insert(2);
  insert(3);
  insert(4);
  insert(1);
  print();
}


//********************************************************************************************************************************************************************

//Inserting at nth node 

#include<iostream>
using namespace std;


struct node {
    int data;
    node * next;
};
node * head;

// Inserting data at the nth position
void insert(int x,int n){
    node * temp1 = new node;
    temp1-> data = x;
    temp1 -> next = NULL;
    if(n==1){
        temp1->next = head;
        head= temp1;
        return;
    }
    node * temp2 = head;
    for(int i=0;i<n-2;i++){
        temp2 = temp2 ->next;
    }
    temp1-> next= temp2->next;
    temp2->next = temp1;
}
void print(){
    node * temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
}
int main(){
  head = NULL;
  insert(4,1);
  insert(8,2);
  insert(4,2);
  insert(9,2);
  insert(18,1);
  print();
}


//******************************************************************************************************************************************************

//Delete Fron nth position 

#include<iostream>
using namespace std;


struct node {
    int data;
    node * next;
};
node * head;

//insert at the front of the list
void insert(int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = head;
    head = temp;
}

//delete at nth position
void Delete(int n){
    node * temp1 = head;
    if(n==1){
        head = temp1->next;
        free(temp1);
    }
    else{
        for(int i=0;i<n-2;i++){
            temp1= temp1->next;
        }
        node * temp2 = temp1->next;  // Pointing to nth node
        temp1->next = temp2->next;  // linking n-1 to n+1 th node
        free(temp2);
    }
}
void print(){
    node * temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}
int main(){
  head = NULL;
  insert(2);
  insert(3);
  insert(2);
  insert(1);
  print();
  int n;
  cout<<"Enter the position of delete: "<<endl;
  cin>>n;
  Delete(n);
  print();
}

//******************************************************************************************************************************************************
// Print using recursion 

#include<iostream>
using namespace std;


struct node {
    int data;
    node * next;
};


//insert at the last of the list using the pointer
node* Insert(node* head,int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = NULL;
    if(head==NULL) head = temp;
    else {
      node* temp2 = head;
      while(temp2->next != NULL){
        temp2 = temp2->next;
      }
      temp2->next = temp;
    }
    return head;
}

//Recursive Print Function
void Print(node* p){
    if(p==NULL) return;
    cout<<p->data<<" ";
    Print(p->next);
}

int main(){
  node * head= NULL;
  head = Insert(head,2);
  head = Insert(head,3);
  head = Insert(head,5);
  head = Insert(head,7);
  Print(head);
}

//******************************************************************************************************************************************************

//Reverse using iterative 

#include<iostream>
using namespace std;


struct node {
    int data;
    node * next;
};
node * head;

//insert at the front of the list
void insert(int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = head;
    head = temp;
}

// Reverse LinkedList
void Reverse(){
    node *current,*prev,*next;
    current= head;
    prev= NULL;
    while(current !=NULL){
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    head = prev;
}

void print(){
    node * temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

int main(){
  head = NULL;
  insert(2);
  insert(3);
  insert(4);
  insert(1);
  print();
  Reverse();
  print();
}

//******************************************************************************************************************************************************

//Reverse Using Recursion 

#include<iostream>
using namespace std;


struct node {
    int data;
    node * next;
};


//insert at the last of the list using the pointer
node* Insert(node* head,int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = NULL;
    if(head==NULL) head = temp;
    else {
      node* temp2 = head;
      while(temp2->next != NULL){
        temp2 = temp2->next;
      }
      temp2->next = temp;
    }
    return head;
}

//Recursive Reverse  Print Function
void ReversePrint(node* p){
    if(p==NULL) return;
    ReversePrint(p->next);  // Just 2 Line InterChanges
    cout<<p->data<<" "; // Just 2 Line Interchange

}

int main(){
  node * head= NULL;
  head = Insert(head,2);
  head = Insert(head,3);
  head = Insert(head,5);
  head = Insert(head,7);
  ReversePrint(head);
}

//******************************************************************************************************************************************************
//Reverse Using Stack 

#include<iostream>
#include<stack>
using namespace std;


struct node {
    int data;
    node * next;
};


//insert at the last of the list using the pointer
node* Insert(node* head,int x){
    node* temp = new node;
    temp-> data = x;
    temp-> next = NULL;
    if(head==NULL) head = temp;
    else {
      node* temp2 = head;
      while(temp2->next != NULL){
        temp2 = temp2->next;
      }
      temp2->next = temp;
    }
    return head;
}

//Reverse Function using Stack
void Reverse(node* head){
    if(head==NULL) return;
    stack<node*>S;
    node* temp= head;
    while(temp!=NULL){
        S.push(temp);
        temp= temp->next;
    }
    temp= S.top();
    head= temp;
    S.pop();
    while(!S.empty()){
        temp->next= S.top();
        S.pop();
        temp= temp->next;
    }
    temp->next=NULL;

    //Print
    node* temp2= head;
    while(temp2!=NULL){
        cout<<temp2->data<<" ";
        temp2= temp2->next;
    }
}



int main(){
  node * head= NULL;
  head = Insert(head,10);
  head = Insert(head,3);
  head = Insert(head,5);
  head = Insert(head,0);
  Reverse(head);
}

//******************************************************************************************************************************************************

//Doubly Linked List 

#include<iostream>
using namespace std;

//Doubly Linked List
struct node {
    int data;
    node * next;
    node * prev;
};
node * head;

// Function to create a new node
node * getNewNode(int x){
    node * newNode = new node;
    newNode->data =x;
    newNode->prev= NULL;
    newNode-> next = NULL;
    return newNode;
}

//Inserting At Beginning 
void insertAtHead(int x){
    node * temp = getNewNode(x);
    if(head==NULL){
        head = temp;
        return;
    }
    head->prev = temp;
    temp->next= head;
    head = temp;
}

void Print(){
    cout<<"Print"<<endl;
    node* temp = head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}

void reversePrint(){
    cout<<"Reverse Print"<<endl;
    node* temp = head;
    while(temp->next!=NULL){
        temp = temp->next;
    }
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->prev;
    }
    cout<<endl;
}
int main(){
    head = NULL;
    insertAtHead(1);
    Print();
    reversePrint();
    insertAtHead(2);
    Print();
    reversePrint();
    insertAtHead(4);
    Print();
    reversePrint();
}

/*
4
4 6 8 2
*/





//******************************************************************************************************************************************************







//******************************************************************************************************************************************************







//******************************************************************************************************************************************************




//******************************************************************************************************************************************************





//******************************************************************************************************************************************************






//******************************************************************************************************************************************************
